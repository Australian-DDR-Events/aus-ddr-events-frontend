version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  jira: circleci/jira@1.3.0
jobs:
  install:
    working_directory: ~/aus-ddr-poc
    docker:
      - image: cimg/node:15.6.0
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/aus-ddr-poc
      - run:
          name: install
          command: yarn install
      - persist_to_workspace:
          root: ~/
          paths:
            - aus-ddr-poc
  lint:
    working_directory: ~/aus-ddr-poc
    docker:
      - image: cimg/node:15.6.0
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn lint
  test:
    working_directory: ~/aus-ddr-poc
    docker:
      - image: cimg/node:15.6.0
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn test
  build:
    working_directory: ~/aus-ddr-poc
    docker:
      - image: cimg/node:15.6.0
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Populate .env.$NODE_ENV
          command: |
            printf "CLIENT_ID=$CLIENT_ID\r\n" >> .env.$NODE_ENV
            printf "PROVIDER=$PROVIDER\r\n" >> .env.$NODE_ENV
            printf "API_BASE=$API_BASE\r\n" >> .env.$NODE_ENV
      - run: yarn build:prod
      - persist_to_workspace:
          root: ~/
          paths:
            - aus-ddr-poc/dist
  deploy_dev:
    working_directory: ~/aus-ddr-poc
    docker:
      - image: cimg/node:15.6.0
    resource_class: medium
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - attach_workspace:
          at: ~/
      - run: echo dev
      - run: |
          cdn_stack=$(aws ssm get-parameter --name '/bauxe/stacks/cdn' | jq -r '.Parameter.Value')
          root_bucket_name=$(aws cloudformation describe-stacks --stack-name "$cdn_stack" | jq -r '.Stacks[0].Outputs[] | select(.ExportName == "root-bucket-name-bauxe") | .OutputValue')
          root_cdn_id=$(aws cloudformation describe-stacks --stack-name "$cdn_stack" | jq -r '.Stacks[0].Outputs[] | select(.ExportName == "root-distribution-id-bauxe") | .OutputValue')
          aws s3 cp ./aus-ddr-poc/dist s3://$root_bucket_name/
          aws cloudfront create-invalidation \
            --distribution-id $root_cdn_id \
            --paths "/index.html"
          aws s3 sync ./aus-ddr-poc/dist s3://$root_bucket_name/
  deploy:
    working_directory: ~/aus-ddr-poc
    docker:
      - image: cimg/node:15.6.0
    resource_class: medium
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - attach_workspace:
          at: ~/
      - run: echo staging
      - run: |
          cdn_stack=$(aws ssm get-parameter --name '/staging/stacks/cdn' | jq -r '.Parameter.Value')
          root_bucket_name=$(aws cloudformation describe-stacks --stack-name "$cdn_stack" | jq -r '.Stacks[0].Outputs[] | select(.ExportName == "root-bucket-name-staging") | .OutputValue')
          root_cdn_id=$(aws cloudformation describe-stacks --stack-name "$cdn_stack" | jq -r '.Stacks[0].Outputs[] | select(.ExportName == "root-distribution-id-staging") | .OutputValue')
          aws s3 cp ./aus-ddr-poc/dist s3://$root_bucket_name/
          aws cloudfront create-invalidation \
            --distribution-id $root_cdn_id \
            --paths "/index.html"
          aws s3 sync ./aus-ddr-poc/dist s3://$root_bucket_name/
  deploy_prod:
    working_directory: ~/aus-ddr-poc
    docker:
      - image: cimg/node:15.6.0
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/
      - run: echo prod

workflows:
  build_and_test:
    jobs:
      - install

      - lint:
          post-steps:
            - jira/notify
          requires:
            - install

      - test:
          post-steps:
            - jira/notify
          requires:
            - install

      - build:
          name: build-development
          context:
            - staging
          post-steps:
            - jira/notify
          requires:
            - test
            - lint
          filters:
            branches:
              ignore: master

      - deploy_dev:
          name: deploy-development
          context:
            - staging
          post-steps:
            - jira/notify
          requires:
            - build-development
          filters:
            branches:
              ignore: master

      - build:
          name: build-staging
          context:
            - staging
          post-steps:
            - jira/notify
          requires:
            - test
            - lint
          filters:
            branches:
              only: master

      - deploy:
          name: deploy-staging
          context:
            - staging
          post-steps:
            - jira/notify
          requires:
            - build-staging
          filters:
            branches:
              only: master

      - block_production:
          type: approval
          requires:
            - deploy-staging

      - build:
          name: build-production
          context:
            - production
          post-steps:
            - jira/notify
          requires:
            - block_production
          filters:
            branches:
              only: master

      - deploy_prod:
          context:
            - production
          post-steps:
            - jira/notify
          requires:
            - build-production
          filters:
            branches:
              only: master
